# www.baidu.com: 网址(网站);  但是如果太长就不太确切了;
#   url: 统一资源定位符!
#   完整的网站(url):   http://www.baidu.com:80/aaa/bbb/index.html?username=aaa&password=bbb
#       http/https: https在http(明码传输)协议基础上增加了一个加密层;(https收费...)
#       http/https占的端口:  http: 80;    https: 443
#       index.html: 在域名/ip后面不谢任何页面,默认访问主页 /index.html
#       ?username=aaa&password=bbb: 发送请求的时候如果伴随内容,GET请求一般会显示在地址栏中(浏览器做的优化)
#   (了解...)


# 1.请求行(request line)
GET / HTTP/1.1\r\n
# 格式: 提交形式 资源路径 协议/版本号
# GET: 提交形式,常见的GET/POST  (GET/POST/PUT/DELETE...)
#       GET:  获取; (这个请求的功能,一般用于从服务端获取内容)
#       POST: 发送; (这个请求的功能,一般用于向服务端存储数据)
# /: 资源路径;(访问的网页不同,这个位置的值就不同)  (明天重点使用...)
# HTTP/1.1: 协议/版本号\r\n

# 2.请求头(request header)
# 格式: 头属性: 头信息\r\n
#   a.Host: 主机;(重点,今天要用!)
Host: www.baidu.com
#   b.Connection: 设置链接形式;长连接!(http1.1以后都是长连接...)
Connection: keep-alive
#   c.Upgrade-Insecure-Requests: 有了他就代表服务端可以发送https协议的响应;
Upgrade-Insecure-Requests: 1
#   d.User-Agent: 用户代理: 系统和浏览器的版本...
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36
#   e.Accept: 接收设置;
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
#   f.Accept-Encoding: 压缩格式
Accept-Encoding: gzip, deflate, br
#   g.Accept-Language: 语言识别
Accept-Language: zh-CN,zh;q=0.9


# 总结: 请求报文格式
#   请求行:
        GET / http/1.1\r\n
#   请求头:
        头属性: 属性值\r\n
        Host: www.baidu.com\r\n
#   空行:
        \r\n
#   请求体:
        不研究...(现阶段)
        (name=abc&age=18&...)
